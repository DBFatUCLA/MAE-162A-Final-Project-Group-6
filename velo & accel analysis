%********************************************
% t2 = ((t2max - t2min)/2) * sin(w*t) + ((t2max + t2min)/2);

w = 1 * (pi/180); %from degrees per second to radians per second (1 is given)
time_max = 1000; %in seconds

%*********************************************
%veloctiy analysis loop 1
KC3_1 = 0; %1st order kc for theta3
KC4_1 = 0;
KC_1_1 = [KC3_1 ; KC4_1]; %1st order KC for loop 1

%recalc the jacobian (ill probably take this out)
J(1,1) = -r3 * sin(n_1(1,1)); % partial of f1 w.r.t x
J(1,2) = -r4 * sin(n_1(2,1)); % partial of f2 w.r.t x
J(2,1) = r3 * cos(n_1(1,1)); % partial of f1 w.r.t y
J(2,2) = r4 * cos(n_1(2,1)); % partial of r2 w.r.t y

t = 0;
while (t < time_max)   
    t = t + 1; 
    w2 = ((t2max - t2min)/2) * w * cos(w*t);


    %solve for the first order KC values
    KC_1_1 = inv(J) * [r2*sin(t2) ; -r2*sin(t2)];

    %solve for w3 and w3
    w3 = w2 * KC3_1;
    w4 = w2 * KC4_1;

    w3_m(1:t) = w3; %creating an expanding array that captures the changing values of w3
    w4_m(1:t) = w4;
end

%********************************************
%acceleration analysis for loop 1

KC3_2 = 0;
KC4_2 = 0; 
KC_1_2 = [KC3_2 ; KC4_2];

t = 0;
while (t < time_max)   
    t = t + 1;
    alpha2 = -((t2max - t2min)/2) * w^2 * sin(w*t);

    %solve for the second order KC values
    KC_1_2 = inv(J) * [r2*cos(t2) + (KC3_1)^2 * r3*cos(t3) + (KC4_1)^2 * r4*cos(t4) ; 
           r2*sin(t2) + (KC3_1)^2 * r3 *sin(t3) + (KC4_1)^2 * r4 * sin(t4)]; 

    alpha3 = (KC3_2 * w2^2) + (KC3_1 * alpha2);
    alpha4 = (KC4_2 * w2^2) + (KC4_1 * alpha2);

    alpha3_m(1:t) = alpha3;
    alpha4_m(1:t) = alpha4;
end

%******************************************************
%loop 2
n_2 = [theta5 ; theta6];

%velocity analysis for loop 2
KC5_1 = 0;
KC6_1 = 0;
KC_2_1 = [KC5_1 ; KC6_1];

J2(1,1) = -r5 * sin(n_2(1,1)); % partial of f1 w.r.t x
J2(1,2) = -r6 * sin(n_2(2,1)); % partial of f2 w.r.t x
J2(2,1) = r3 * cos(n_2(1,1)); % partial of f1 w.r.t y
J2(2,2) = r4 * cos(n_2(2,1)); % partial of r2 w.r.t y

t = 0;
while (t < time_max)   
    t = t + 1; 
    w2 = ((t2max - t2min)/2) * w * cos(w*t);

    KC_2_1 = inv(J2) * [r2*sin(t2) + KC3_1*r26*sin(t3) + KC4_1*r15*sin(t4) ; 
                -r2*cos(t2) - KC3_1*r26*cos(t3) - KC4_1*r15*cos(t4)];

    w5 = w2 * KC5_1;
    w6 = w2 * KC6_1;

    w5_m(1:t) = w5; %creating an expanding array that captures the changing values of w3
    w6_m(1:t) = w6;
end

%acceleration analysis for loop 2
KC5_2 = 0;
KC6_2 = 0;
KC_2_2 = [KC5_2 ; KC6_2];

t = 0;
while (t < time_max)   
    t = t + 1;
    alpha2 = -((t2max - t2min)/2) * w^2 * sin(w*t);
    KC_2_2 = inv(J2) * [r2*cos(t2) + KC3_1^2 * r26 * cos(t3) + KC3_2 * r26 * sin(t3) + KC6_1^2 * r6 * cos(t6) + KC5_1^2 * r5 * cos(t5) + KC4_1^2 * r15 * cos(t4) + KC4_2 * r15 * sin(t4) ;
                r2 * sin(t2) + KC3_1^2 * r26 * sin(t3) - KC3_2 * r26 * cos(t3) + KC6_1^2 * r6 * sin(t6) + KC5_1^2 * r5 * sin(t5) + KC4_1^2 * r15 * sin(t4) - KC4_2 * r15 * cos(t4)];

    alpha5 = (KC5_2 * w2^2) + (KC5_1 * alpha2);
    alpha6 = (KC6_2 * w2^2) + (KC6_1 * alpha2);

    alpha5_m(1:t) = alpha5;
    alpha6_m(1:t) = alpha6;
end


    
    
    
    
    
                


  
  
