% ChebyShev Linkage At Any Deflection
function [min2, min3, min4, h, dfl] = Chebyshev(t2, r1, r2, r3, r4, t1)
% Clear cache
% clear
% close all
% clc

% Test variables
% r1 = 4*A;
% r2 = 5*A;
% r3 = 2*A;
% r4 = r2;
% t1 = 0;
% t2 = 36.899*pi()/180;

% Define variables
sysorder = 2; % number of eqns
theta3 = 0;
theta4 = 0;
eps = 1e-6;
difx = 1;
dify = 1;
iter = 0;

% Define matrices
J = zeros(sysorder, sysorder);
Jinv = zeros(sysorder, sysorder);
n_1 = [theta3; theta4];
n = zeros(sysorder, 1);
f = zeros(sysorder, 1);
sol = zeros(4,4);

% Create table title
%fprintf("Guess X   Guess Y   Final X      Final Y\n")

% Number of guesses between 0 and 2pi
numguess = 4;

% Set minimum angle guess for 3 and 4
min2 = 360;
min3 = 360;
min4 = 360;

% Run through range of guesses between 0 and 2pi to get complete picture
% of solutions
for i = 1:numguess
    for j = 1:numguess
        
        % Initialize variables
        difx = 1;
        dify = 1;
        iter = 0;
        theta3 = 2 * i * pi() / numguess;
        theta4 = 2 * j * pi() / numguess;
        n_1 = [theta3; theta4];

        % Initialize J and f
        J(1,1) = -r3 * sin(n_1(1,1)); % partial of f1 w.r.t x
        J(1,2) = -r4 * sin(n_1(2,1)); % partial of f2 w.r.t x
        J(2,1) = r3 * cos(n_1(1,1)); % partial of f1 w.r.t y
        J(2,2) = r4 * cos(n_1(2,1)); % partial of r2 w.r.t y
        f(1,1) = r2 * cos(t2) + r4 * cos(n_1(2,1)) + ...
                 r3 * cos(n_1(1,1)) - r1 * cos(t1);
        f(2,1) = r2 * sin(t2) + r4 * sin(n_1(2,1)) + ...
                 r3 * sin(n_1(1,1));
        
        % Eliminate singular matrices that will not return valid solutions
        if cond(J) > 1e10
            continue
        end
        
        % Newton-Raphson's
        while ((difx > eps || dify > eps) && iter < 1000)
            % Calculate inverse of J
            Jinv = inv(J);
            
            % Determine value of xn based on xn-1
            n = -Jinv * f + n_1;
            
            % Calculate difference between xn and xn-1
            difx = abs(n(1,1) - n_1(1,1));
            dify = abs(n(2,1) - n_1(2,1));
            
            % New xn-1 is current xn
            n_1 = n;
        
            % Print value of xn
            %fprintf('Iteration: %1.0f \n New xn-1: %1.6f, %1.6f \n', iter, n(1,1), n(2,1));
        
            % Recalculating values of f1, f2, and J
            f(1,1) = r2 * cos(t2) + r4 * cos(n_1(2,1)) + ...
                     r3 * cos(n_1(1,1)) - r1;
            f(2,1) = r2 * sin(t2) + r4 * sin(n_1(2,1)) + ...
                     r3 * sin(n_1(1,1));
            
            J(1,1) = -r3 * sin(n_1(1,1)); % partial of f1 w.r.t x
            J(1,2) = -r4 * sin(n_1(2,1)); % partial of f2 w.r.t x
            J(2,1) = r3 * cos(n_1(1,1)); % partial of f1 w.r.t y
            J(2,2) = r4 * cos(n_1(2,1)); % partial of r2 w.r.t y

            iter = iter + 1;
        end
            
        % Determine theta2
        % theta2 = asin((4 * A - r3*sin(n(1,1))/2)/r2);

        % Determine value of angles within 0 to 2pi
        true2 = 180 * wrapTo2Pi(t2) / pi();
        true3 = 180 * wrapTo2Pi(n_1(1,1)) / pi();
        true4 = 180 * wrapTo2Pi(n_1(2,1)) / pi();

        % Find lowest value of theta 3 (angle should be acute)
        if (true3 < min3)
            min2 = true2;
            min3 = true3;
            min4 = true4;
        end

        %fprintf("%1.4f    %1.4f    %1.5f    %1.5f    %1.5f\n", theta3, theta4, true3, true4, true2);
    end
    
    

end

% Determine maximum deflection and 
dfl = r2 * cos(t2) + r3 * cosd(min3) / 2 - r1 / 2;
h = r2 * sin(t2) + r3 * sind(min3) / 2;


%********************************************
% finding equations for w2 and alpha2
w = pi()/180; %from degrees per second to radians per second (1 is given)
t2 = ((t2max - t2min)/2) * sin(w*t) + ((t2max + t2min)/2);
w2 = ((t2max - t2min)/2) * w * cos(w*t);
alpha2 = -((t2max - t2min)/2) * w^2 * sin(w*t);


%*********************************************
%veloctiy analysis loop 1
t3prime = 0;
t4prime = 0;
KC1 = [t3prime ; t4prime];

%recalc the jacobian (ill probably take this out)
J(1,1) = -r3 * sin(n_1(1,1)); % partial of f1 w.r.t x
J(1,2) = -r4 * sin(n_1(2,1)); % partial of f2 w.r.t x
J(2,1) = r3 * cos(n_1(1,1)); % partial of f1 w.r.t y
J(2,2) = r4 * cos(n_1(2,1)); % partial of r2 w.r.t y

%solve for the first order KC values
KC1 = J\[r2*sin(t2) ; -r2*sin(t2)];

%solve for w3 and w3
w3 = w2*t'3;
w4 = w2*t'4;

%********************************************
%acceleration analysis for loop 1

t"3 = 0;
t"4 = 0; 
KC2 = [t"3 ; t"4];

%solve for the second order KC values
KC2 = J\[r2*cos(t2) + (t'3)^2 * r3*cos(t3) + (t'4)^2 * r4*cos(t4) ; 
           r2*sin(t2) + (t'3)^2 * r3 *sin(t3) + (t'4)^2 * r4 * sin(t4)] 

alpha3 = (t"3 * w2^2) + (t'3 * alpha2);
alpha4 = (t"4 * w2^2) + (t'4 * alpha2);

%******************************************************
%velocity analysis for loop 2

end